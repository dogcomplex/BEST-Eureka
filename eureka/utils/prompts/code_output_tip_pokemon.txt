The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) You may find it helpful to normalize the reward to a fixed range by applying transformations like torch.exp to the overall reward or its components
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as torch.Tensor
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Only change function definitions if you've changed all other references to them in the code.  Be conservative.


REQUIREMENTS:
(1) You may only modify the compute_rewards() function.  All other proposed code changes will be discarded.  
(2) The rest of the code is read-only, shown as references callable from compute_rewards()
(2) However, you may define sub-functions within compute_rewards() which replace previous functionality
(3) You may use any addressable memory code known from the Pokemon Red game, but try to stick to the spirit of the game (no rom hacking)
(4) The goal is to play the game like a realistic human player, or better, progressing through the story, catching as many unique pokemon as possible, earning badges and beating the elite four
(5) Try to keep code size compact and generalized still.  You have a big context limit but it's still there

